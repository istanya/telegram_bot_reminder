// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  user_id,
  user_name,
  dt_reminder,
  bot_message_id,
  message,
  state,
  dt_created
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)RETURNING id, user_id, user_name, dt_reminder, bot_message_id, message, state, dt_created
`

type CreateEventParams struct {
	UserID       int64     `json:"user_id"`
	UserName     string    `json:"user_name"`
	DtReminder   time.Time `json:"dt_reminder"`
	BotMessageID int32     `json:"bot_message_id"`
	Message      string    `json:"message"`
	State        string    `json:"state"`
	DtCreated    time.Time `json:"dt_created"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.UserID,
		arg.UserName,
		arg.DtReminder,
		arg.BotMessageID,
		arg.Message,
		arg.State,
		arg.DtCreated,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.DtReminder,
		&i.BotMessageID,
		&i.Message,
		&i.State,
		&i.DtCreated,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, user_id, user_name, dt_reminder, bot_message_id, message, state, dt_created FROM events
WHERE bot_message_id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, botMessageID int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, botMessageID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.UserName,
		&i.DtReminder,
		&i.BotMessageID,
		&i.Message,
		&i.State,
		&i.DtCreated,
	)
	return i, err
}

const listEventsByTimeAndState = `-- name: ListEventsByTimeAndState :many
SELECT id, user_id, user_name, dt_reminder, bot_message_id, message, state, dt_created FROM events
WHERE dt_reminder <= $1 AND state = $2
`

type ListEventsByTimeAndStateParams struct {
	DtReminder time.Time `json:"dt_reminder"`
	State      string    `json:"state"`
}

func (q *Queries) ListEventsByTimeAndState(ctx context.Context, arg ListEventsByTimeAndStateParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventsByTimeAndState, arg.DtReminder, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserName,
			&i.DtReminder,
			&i.BotMessageID,
			&i.Message,
			&i.State,
			&i.DtCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventState = `-- name: UpdateEventState :exec
UPDATE events
SET state = $2
WHERE id = $1
`

type UpdateEventStateParams struct {
	ID    int64  `json:"id"`
	State string `json:"state"`
}

func (q *Queries) UpdateEventState(ctx context.Context, arg UpdateEventStateParams) error {
	_, err := q.db.ExecContext(ctx, updateEventState, arg.ID, arg.State)
	return err
}
